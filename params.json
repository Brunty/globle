{
  "name": "Globle",
  "tagline": "Because we all like globle state, right?",
  "body": "# Globle - a PHP Container\r\n\r\n## Installation\r\n\r\nThrough composer:\r\n\r\n`composer require brunty/globle`\r\n\r\n## Interop\r\n\r\nGloble implements `\\Interop\\Container\\ContainerInterface`\r\n\r\n## Usage\r\n\r\n### Binding\r\n\r\nYou can bind items into the container in a few different ways:\r\n\r\nVia the constructor:\r\n\r\n```php\r\n$items = [\r\n    MyClass::class  =>  function() {\r\n        return new MyClass;\r\n    }\r\n];\r\n\r\n$globle = new \\Brunty\\Globle\\Globle($items);\r\n```\r\n\r\nThis will bind to the container where the key of the array is the ID used to retrieve an item from the container.\r\n\r\n\r\nYou can also bind after the container has been instantiated, simply call the `bind` function and pass it an ID and a callable.\r\n\r\n```php\r\n\r\n$globle = new \\Brunty\\Globle\\Globle;\r\n\r\n$globle->bind(MyClass::class, function() {\r\n    return new MyClass;\r\n});\r\n```\r\n\r\n**By default, each time you call `get($id)` you will receive the same instance of the class as the first time it was resolved.**\r\n\r\n**If you want to get a new instance each time, you can bind it into the container via an additional array of identifiers in the constructor:**\r\n \r\n```php\r\n$items = [\r\n    MyClass::class  =>  function() {\r\n        return new MyClass;\r\n    }\r\n];\r\n\r\n$factories = [MyClass::class];\r\n\r\n$globle = new \\Brunty\\Globle\\Globle($items, $factories);\r\n```\r\n\r\n**Or by binding via the `factory` method.**\r\n\r\n```php\r\n\r\n$globle = new \\Brunty\\Globle\\Globle;\r\n\r\n$globle->factory(MyClass::class, function() {\r\n    return new MyClass;\r\n});\r\n```\r\n\r\n### Getting objects\r\n\r\nCalling `$container->get($id);` will retrieve the defined item in the container.\r\n\r\n\r\n### Using the container to inject dependencies into other items:\r\n\r\nThe function defined when binding an item into the container can have an instance of `Interop\\Container\\ContainerInterface` passed to it as a parameter, this will be the container itself so can be used to get other items.\r\n\r\nFor example:\r\n\r\n```php\r\nclass Foo\r\n{\r\n\r\n    /**\r\n     * @var Bar\r\n     */\r\n    private $bar;\r\n\r\n    /**\r\n     * @param Bar $bar\r\n     */\r\n    public function __construct(Bar $bar)\r\n    {\r\n        $this->bar = $bar;\r\n    }\r\n\r\n    /**\r\n     * @return Bar\r\n     */\r\n    public function getBar()\r\n    {\r\n        return $this->bar;\r\n    }\r\n}\r\n\r\nclass Bar\r\n{\r\n\r\n}\r\n\r\n$globle = new \\Brunty\\Globle\\Globle;\r\n\r\n$globle->bind(Bar::class, function() {\r\n    return new Bar;\r\n});\r\n\r\n$globle->bind(Foo::class, function(\\Interop\\Container\\ContainerInterface $globle) {\r\n    return new Foo($globle->get(Bar::class));\r\n});\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}